generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  USER
}

model User {
  id String @id @default(uuid()) @db.Uuid()

  name  String @db.VarChar(100)
  email String @unique @db.VarChar(100)

  roles UserRoles[] @default([USER])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_credentials UserCredentials?
  post             Post[]
  post_reaction    PostReaction[]
  comment          Comment[]
}

model UserCredentials {
  id String @id @default(uuid()) @db.Uuid()

  user_id String @unique @db.Uuid()

  password_hash        String   @db.VarChar(60)
  last_password_change DateTime @default(now())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Post {
  id String @id @default(uuid()) @db.Uuid()

  user_id String @db.Uuid()

  title       String @db.VarChar(100)
  description String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post_reaction PostReaction[]
  comment       Comment[]
}

model Comment {
  id String @id @default(uuid()) @db.Uuid()

  user_id String @db.Uuid()
  post_id String @db.Uuid()

  description String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

enum ReactionType {
  LIKE
  DISLIKE
}

model PostReaction {
  id String @id @default(uuid()) @db.Uuid()

  user_id String @db.Uuid()
  post_id String @db.Uuid()

  reaction_type ReactionType

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
}
